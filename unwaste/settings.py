"""
Django settings for unwaste project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import re
from pathlib import Path

# Get database credentials from Heroku's rotating URI.
HEROKU_POSTGRESQL_URI_REGEX = re.compile(r"""
    postgres:\/\/   # Match "postgres://" once.
    (?P<username>   # CAPTURE GROUP "username" | Open capture group.
        [^:]+       # Match any character that is not ":", between 1 and ∞
                    # times.
    )               # CAPTURE GROUP "username" | Close capture group.
    :               # Match ":" once.
    (?P<password>   # CAPTURE GROUP "password" | Open capture group.
        [^@]+       # Match any character that is not "@", between 1 and ∞
                    # times.
    )               # CAPTURE GROUP "password" | Close capture group.
    @               # Match "@" once.
    (?P<host>       # CAPTURE GROUP "host" | Open capture group.
        [^:]+       # Match any character that is not ":", between 1 and ∞
                    # times.
    )               # CAPTURE GROUP "host" | Close capture group.
    :               # Match ":" once.
    (?P<port>       # CAPTURE GROUP "port" | Open capture group.
        \d{4}       # Match any character that is a digit, 4 times.
    )               # CAPTURE GROUP "port" | Close capture group.
    \/              # Match "/" once.
    (?P<name>       # CAPTURE GROUP "name" | Open capture group.
        .+          # Match any character, between 1 and ∞ times.
    )               # CAPTURE GROUP "name" | Close capture group.""", re.VERBOSE)
HEROKU_POSTGRESQL_URI = os.getenv('DATABASE_URL')
MATCH = HEROKU_POSTGRESQL_URI_REGEX.fullmatch(HEROKU_POSTGRESQL_URI)
DATABASE_CREDENTIALS = MATCH.groupdict()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', os.getenv('APPLICATION_URL')]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base.apps.BaseConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'unwaste.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'unwaste.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DATABASE_CREDENTIALS['name'],
        'HOST': DATABASE_CREDENTIALS['host'],
        'PORT': DATABASE_CREDENTIALS['port'],
        'USER': DATABASE_CREDENTIALS['username'],
        'PASSWORD': DATABASE_CREDENTIALS['password'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model.
AUTH_USER_MODEL = 'base.User'

# Email settings.
MAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = f'unWaste <{EMAIL_HOST_USER}>'
